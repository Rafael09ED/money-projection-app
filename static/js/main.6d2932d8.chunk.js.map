{"version":3,"sources":["BalanceSimulator.ts","App.tsx","index.tsx"],"names":["calcualteMoneySteps","cost","startDate","endDate","frequency","dateSteps","Error","answer","Array","length","fill","rollingSum","currentDateStep","timePointer","_","first","plus","last","equals","getTimelineFromTagGroup","modifiers","tagsGroups","reduce","accumulator","modifier","tagsToInclude","tags","i","f","modifierShouldBeCounted","unzipWith","add","App","days","range","map","DateTime","fromISO","groupNames","set","Duration","title","filterTags","data","initial","forEach","day","group","j","push","toISODate","value","className","xField","yField","seriesField","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRA8BMA,EAAsB,SAACC,EAAcC,EAAiBC,EAAeC,EAAsBC,GAC7F,GAAIH,EAAYC,EAAS,MAAM,IAAIG,MAAM,8BASzC,IAPA,IAAMC,EAAmB,IAAIC,MAAMH,EAAUI,OAAS,GAAGC,KAAK,GAE1DC,EAAa,EACbC,EAAkB,EAElBC,EAAcX,EAEXW,EAAcC,IAAEC,MAAMV,IACzBM,GAAcV,EACdY,EAAcA,EAAYG,KAAKZ,GAGnC,KAAOS,EAAcR,EAAUO,IAE3B,KADAA,GACuBL,EAAOE,OAC1B,OAAOF,EAGf,KACKM,EAAcV,GAAWU,EAAcC,IAAEG,KAAKZ,IAC3CQ,EAAYK,OAAOf,IAAYU,EAAYK,OAAOhB,IACxD,CACE,KAAOG,EAAUO,GAAmBC,GAChCN,EAAOK,GAAmBD,EAC1BC,IAEJD,GAAcV,EACdY,EAAcA,EAAYG,KAAKZ,GAGnC,KAAOQ,EAAkBL,EAAOE,OAAQG,IACpCL,EAAOK,GAAmBD,EAE9B,OAAOJ,GAGLY,EAA0B,SAACC,EAA4Bf,EAAmBgB,GAC5E,OAAOD,EACFE,QACG,SAACC,EAAaC,GACV,OApDgB,SAACA,EAAyBC,GACtD,GAAID,EAASE,KAAKjB,QAAU,EAAG,OAAO,EADqD,oBAE7EgB,GAF6E,IAE3F,kCAASE,EAAT,sBACkBH,EAASE,MAD3B,IACI,2BACI,GAAIC,IADR,QAEQ,OAAO,EAHnB,0BAAAC,MAF2F,8BAM3F,OAAO,EA8CUC,CAAwBL,EAAUH,GAGhCP,IAAEgB,UACL,CACIP,EACAvB,EAAoBwB,EAASvB,KAAMuB,EAAStB,UAAWsB,EAASrB,QAASqB,EAASpB,UAAWC,IAEjGS,IAAEiB,KAPKR,IAUf,IAAIf,MAAMH,EAAUI,OAAS,GAAGC,KAAK,K,SC9BlCsB,MA/Cf,WACE,IDgF+CZ,EAA4Bf,EChFrE4B,EAAOnB,IAAEoB,OAAO,EAAG,GAAGC,KAAI,SAAAR,GAAC,OAAIS,WAASC,QAAQ,cAAcrB,KAAK,CAAEiB,KAAMN,OAC3EW,EAAa,CAAC,IAAK,OACnBC,GD8EyCnB,EC7E7C,CACE,CACEnB,KAAM,EACNC,UAAWkC,WAASC,QAAQ,cAC5BlC,QAASiC,WAASC,QAAQ,cAC1BjC,UAAWoC,WAASH,QAAQ,OAC5BX,KAAM,CAAC,KACPe,MAAO,SAET,CACExC,KAAM,GACNC,UAAWkC,WAASC,QAAQ,cAC5BlC,QAASiC,WAASC,QAAQ,cAC1BjC,UAAWoC,WAASH,QAAQ,OAC5BX,KAAM,CAAC,KACPe,MAAO,UD8D8DpC,EC3DzE4B,EACA,CACE,CAAC,KACD,CAAC,IAAK,MDyDUE,KAAI,SAACO,GAAD,OAAiCvB,EAAwBC,EAAWf,EAAWqC,OCrDjGC,EAAwD,GAS9D,OAPA7B,IAAE8B,QAAQX,GAAMY,SAAQ,SAACC,EAAKnB,GAC5BW,EAAWO,SAAQ,SAACE,EAAOC,GACzBL,EAAKM,KAAK,CAAEH,IAAKA,EAAII,YAAaH,MAAOA,EAAOI,MAAOZ,EAAIS,GAAGrB,WAMhE,qBAAKyB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CAAMT,KAAMA,EAAMU,OAAO,MAAMC,OAAO,QAAQC,YAAY,eC3ClEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6d2932d8.chunk.js","sourcesContent":["import { DateTime, Duration } from \"luxon\";\nimport _ from 'lodash';\n\ntype Date = DateTime;\ntype Tag = string;\n\ntype DeltaTime = Duration;\n// interface DeltaTime {\n//     unit: string,\n//     amount: number\n// };\n\ninterface MoneyModifier {\n    title: string,\n    cost: number,\n    frequency: DeltaTime, // Could convert to function\n    tags: Tag[],\n    startDate: Date,\n    endDate: Date\n}\n\nconst modifierShouldBeCounted = (modifier: MoneyModifier, tagsToInclude: string[]): boolean => {\n    if (modifier.tags.length <= 0) return true;\n    for (let i of tagsToInclude)\n        for (let j of modifier.tags)\n            if (i === j)\n                return true;\n    return false;\n}\n\nconst calcualteMoneySteps = (cost: number, startDate: Date, endDate: Date, frequency: DeltaTime, dateSteps: Date[]): number[] => {\n    if (startDate > endDate) throw new Error(\"End Date Before Start Date\");\n\n    const answer: number[] = new Array(dateSteps.length - 1).fill(0);\n\n    let rollingSum = 0;\n    let currentDateStep = 0;\n\n    let timePointer = startDate;\n\n    while (timePointer < _.first(dateSteps)!){\n        rollingSum += cost;\n        timePointer = timePointer.plus(frequency);\n    }\n\n    while (timePointer > dateSteps[currentDateStep]) {\n        currentDateStep++;\n        if (currentDateStep >= answer.length)\n            return answer;\n    }\n\n    while (\n        (timePointer < endDate && timePointer < _.last(dateSteps)!)\n        || (timePointer.equals(endDate) && timePointer.equals(startDate))\n    ) {\n        while (dateSteps[currentDateStep] < timePointer) {\n            answer[currentDateStep] = rollingSum;\n            currentDateStep++;\n        }\n        rollingSum += cost;\n        timePointer = timePointer.plus(frequency);\n    }\n\n    for (; currentDateStep < answer.length; currentDateStep++)\n        answer[currentDateStep] = rollingSum;\n\n    return answer;\n}\n\nconst getTimelineFromTagGroup = (modifiers: MoneyModifier[], dateSteps: Date[], tagsGroups: Tag[]): number[] => {\n    return modifiers\n        .reduce(\n            (accumulator, modifier): number[] => {\n                if (!modifierShouldBeCounted(modifier, tagsGroups))\n                    return accumulator;\n\n                return _.unzipWith(\n                    [\n                        accumulator,\n                        calcualteMoneySteps(modifier.cost, modifier.startDate, modifier.endDate, modifier.frequency, dateSteps)\n                    ],\n                    _.add\n                );\n            },\n            new Array(dateSteps.length - 1).fill(0) as number[]\n        );\n}\n\nconst convertFromModifiersToDateMoneyTimeline = (modifiers: MoneyModifier[], dateSteps: Date[], tagsGroups: Tag[][]): number[][] => {\n    return tagsGroups.map((filterTags: Tag[]): number[] => getTimelineFromTagGroup(modifiers, dateSteps, filterTags));\n}\n\nexport type { MoneyModifier }\nexport { modifierShouldBeCounted as shouldModifierBeCounted, convertFromModifiersToDateMoneyTimeline, calcualteMoneySteps };","import React from 'react';\nimport _ from 'lodash';\nimport { DateTime, Duration } from 'luxon';\nimport { Line } from '@ant-design/charts';\nimport './App.css';\nimport { convertFromModifiersToDateMoneyTimeline } from './BalanceSimulator';\n\nfunction App() {\n  const days = _.range(-1, 5).map(i => DateTime.fromISO(\"2017-05-14\").plus({ days: i }));\n  const groupNames = [\"A\", \"A+B\"];\n  const set = convertFromModifiersToDateMoneyTimeline(\n    [\n      {\n        cost: 1,\n        startDate: DateTime.fromISO(\"2017-05-14\"),\n        endDate: DateTime.fromISO(\"2017-05-14\"),\n        frequency: Duration.fromISO('P1D'),\n        tags: [\"a\"],\n        title: \"testA\"\n      },\n      {\n        cost: 10,\n        startDate: DateTime.fromISO(\"2017-05-11\"),\n        endDate: DateTime.fromISO(\"2017-05-14\"),\n        frequency: Duration.fromISO('P1D'),\n        tags: [\"b\"],\n        title: \"testb\"\n      }\n    ],\n    days,\n    [\n      ['a'],\n      ['a', 'b'],\n    ]\n  )\n\n  const data: { day: string, group: string, value: number }[] = [];\n\n  _.initial(days).forEach((day, i) => {\n    groupNames.forEach((group, j) => {\n      data.push({ day: day.toISODate(), group: group, value: set[j][i] });\n    })\n  })\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Line data={data} xField='day' yField='value' seriesField='group'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}